Describe how you could use a single array to implement three stacks.

Solution 1: Subdivision with offsets
    Using three offsets (0, length/3, and 2*length/3), partition
    the insertion of elements into each stack. They will each get
    one third of the array, and are not dynamically sizable. This
    solution would allow for constant time complexities for push()
    and pop().

    Alternatively, you could simply multiply the index by the number
    stack you want to access (and subtract one), so that the array
    would look like:
    [A, B, C, A, B, C, A, B, C]
     0  1  2  3  4  5  6  7  8
    where A, B, and C are elements of stacks A, B, and C.

Solution 2: Shifting
    This method is similar to above, but when one of the stacks runs
    out of space (hits the beginning of the next stack or the end of
    the array), if space allowed, the other stacks could be shifted
    by one index to create more room. This would make push() take
    constant time until a stack size exceeds length/3, at which point
    push() would have linear time complexity.

    Where A, B, and C are values of the stacks A, B, and C, and 0's
    represent unused indicies:

    // There is no more room for elements on the A stack
    [A, A, A, B, 0, 0, C, 0, 0]
    // When another element is pushed to A, the B stack is moved by
    // 1 index. C does not need to be moved.
    [A, A, A, A, B, 0, C, 0, 0]
    // The variable holding the current position of B's stack would
    // need to be changed accordingly.